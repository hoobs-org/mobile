#!/usr/bin/env node

const Program = require("commander");
const Inquirer = require("inquirer");
const { join } = require("path");
const { execSync } = require("child_process");
const { readFileSync } = require("fs-extra");

const root = join(__dirname, "./");
const pjson = JSON.parse(readFileSync(join(root, "package.json")).toString());

const prompt = Inquirer.createPromptModule();

Program.version(pjson.version, "-v, --version", "output the current version")
    .allowUnknownOption();

Program.command("build")
    .description("build the mobile app")
    .option("-p, --platform", "platform to start (ios or android)")
    .option("-l, --lint", "lint the code before building")
    .action(async (command) => {
        let { platform } = command;

        if (!platform || (platform !== "ios" && platform !== "android")) {
            platform = (await prompt([{
                type: "list",
                name: "platform",
                message: "Select the platform you want to emulate",
                choices: [{ name: "iOS", value: "ios" }, { name: "Android", value: "android" }],
            }])).platform;
        }

        switch (platform) {
            case "android":
                if (command.lint) execSync(`${join(root, "node_modules", ".bin", "eslint")} --ext .js,.vue src`, { cwd: root, stdio: "inherit" });

                execSync(`node ${join(root, "build", "build.js")}`, { cwd: root, stdio: "inherit" });
                execSync("cordova build android", { cwd: root, stdio: "inherit" });
                break;

            case "ios":
                if (command.lint) execSync(`${join(root, "node_modules", ".bin", "eslint")} --ext .js,.vue src`, { cwd: root, stdio: "inherit" });

                execSync(`node ${join(root, "build", "build.js")}`, { cwd: root, stdio: "inherit" });
                execSync("cordova build ios", { cwd: root, stdio: "inherit" });
                break;

            default:
                console.log(Program.helpInformation());
                break;
        }
    });

Program.command("emulate")
    .description("start mobile app in an emulator")
    .option("-p, --platform", "platform to start (browser, ios or android)")
    .option("-l, --lint", "lint the code before building")
    .action(async (command) => {
        let { platform } = command;

        if (!platform || (platform !== "ios" && platform !== "android")) {
            platform = (await prompt([{
                type: "list",
                name: "platform",
                message: "Select the platform you want to emulate",
                choices: [
                    { name: "iOS", value: "ios" },
                    { name: "Android", value: "android" },
                    { name: "Browser", value: "browser" },
                ],
            }])).platform;
        }

        switch (platform) {
            case "android":
                if (command.lint) execSync(`${join(root, "node_modules", ".bin", "eslint")} --ext .js,.vue src`, { cwd: root, stdio: "inherit" });

                execSync(`node ${join(root, "build", "build.js")}`, { cwd: root, stdio: "inherit" });
                execSync("cordova build android", { cwd: root, stdio: "inherit" });
                execSync("cordova run android", { cwd: root, stdio: "inherit" });
                break;

            case "ios":
                if (command.lint) execSync(`${join(root, "node_modules", ".bin", "eslint")} --ext .js,.vue src`, { cwd: root, stdio: "inherit" });

                execSync(`node ${join(root, "build", "build.js")}`, { cwd: root, stdio: "inherit" });
                execSync("cordova build ios", { cwd: root, stdio: "inherit" });
                execSync("cordova run ios", { cwd: root, stdio: "inherit" });
                break;

            case "browser":
                if (command.lint) execSync(`${join(root, "node_modules", ".bin", "eslint")} --ext .js,.vue src`, { cwd: root, stdio: "inherit" });

                execSync(`${join(root, "node_modules", ".bin", "webpack-dev-server")} --inline --progress --config ${join(root, "build", "webpack.dev.conf.js")}`, { cwd: root, stdio: "inherit" });
                break;

            default:
                console.log(Program.helpInformation());
                break;
        }
    });

Program.parse(process.argv);
